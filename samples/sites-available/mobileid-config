# This is a sample configuration when a default server entity is present

authorize {
	# Cleanups with preprocess
	preprocess

	# Password handling
	chap
	mschap

	# Suffix handling for realms
	suffix
	if (Stripped-User-Name != "") {
		update request {
			User-Name := Stripped-User-Name
		}
	}

	# Read the 'users' from file and validate password
	files
	pap

	# Read the 'users' from sql
	# sql

	# Read the 'users' from ldap
	# ldap
	# Uncomment it if you want to use ldap for authentication
	#if ((ok || updated) && User-Password) {
	#	update {
	#		control:Auth-Type := ldap
	#	}
	#}

	# Update request with control values 
	update request {
		Called-Station-Id := "%{control:Called-Station-Id}"
		X-MSS-Language := "%{control:X-MSS-Language}"
		X-MSS-MobileID-SN := "%{control:X-MSS-MobileID-SN}"
	}
	# Set Called-Station-Id to User-Name, if not found.
	if (!Called-Station-Id || Called-Station-Id == "") {
		update request {
			Called-Station-Id := "%{User-Name}"
		}
	}

	# Ensure Auth-Type is set to go over authenticate
	if (!control:Auth-Type) {
		update {
			control:Auth-Type := mobileid
		}
	}
}

authenticate {
	Auth-Type PAP {
		pap
		# Callout Mobile ID after 1st method
		mobileid
	}
	Auth-Type CHAP {
		chap
		# Callout Mobile ID after 1st method
		mobileid
	}
	Auth-Type MS-CHAP {
		mschap
		# Callout Mobile ID after 1st method
		mobileid
	}
	Auth-Type LDAP {
		ldap
		# Callout Mobile ID after 1st method
		mobileid
		# Optional call to update the user entry
		# mobileid-ldapupdate
	}
	Auth-Type MOBILEID {
		# Callout Mobile ID only
		mobileid
	}
}

post-auth {
	Post-Auth-Type REJECT {
		attr_filter.access_reject
	}
}